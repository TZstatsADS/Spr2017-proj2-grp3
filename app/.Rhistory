ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "worclouds")
)
server <- function(input, output) {
selectedData <- reactive({
term1 <- paste0(input$data,"-1")
selected.data1 <- dtm.idf.tidy[dtm.idf.tidy$document==term1,]
})
output$wordclouds <- renderPlot({
print("a")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "worcdlouds")
)
server <- function(input, output) {
selectedData <- reactive({
term1 <- paste0(input$data,"-1")
selected.data1 <- dtm.idf.tidy[dtm.idf.tidy$document==term1,]
})
output$wordclouds <- renderPlot({
print("a")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "wordclouds")
)
packages.used=c("tidytext", "dplyr", "tm", "ggplot2", "wordcloud", "rvest",
"tibble", "qdap", "sentimentr", "gplots", "syuzhet",
"factoextra", "beeswarm", "scales", "RColorBrewer", "RANN",
"topicmodels", "splitstackshape", "tidyr", "shiny")
# check packages that need to be installed.
packages.needed=setdiff(packages.used, intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# load packages
library("tidytext")
library("dplyr")
library("tm")
library("ggplot2")
library("wordcloud")
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("topicmodels")
library("splitstackshape")
library("tidyr")
library("shiny")
# source functions
source("../lib/processing.R")
source("../lib/displaying.R")
print(R.version)
folder.path = "../data/InauguralSpeeches/"
speeches = list.files(path = folder.path, pattern = "*.txt")
ff.all <- Corpus(DirSource(folder.path))
# remove white Spaces, transform to lower case, remove stop words, remove empty words and remove punctuation
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
# compute Term-Document Matrix
tdm <- TermDocumentMatrix(ff.all)
# compute Document-Term Matrix
dtm <- DocumentTermMatrix(ff.all)
dtm.tidy <- tidy(dtm)
dtm.all <- summarise(group_by(dtm.tidy, term), sum(count))
# # inspect dtm or tdm
# inspect(tdm[100:105,25:30])
# inspect(dtm[25:27,100:104])
# dim(dtm.idf)
#Note: I am using both tdm and dtm, because it's easier to use one or the other for some applications later on.
# Compute TermDocument Matrix weighted with TF-IDF principle
tdm.idf <- TermDocumentMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x, normalize =FALSE),
stopwords = TRUE))
# Compute DocumentTerm Matrix weighted with TF-IDF principle
dtm.idf <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x, normalize =FALSE),
stopwords = TRUE))
dtm.idf.tidy <- tidy(dtm.idf)
dtm.idf.all <- summarise(group_by(dtm.idf.tidy, term), sum(count))
# # Cast into a Matrix object
# m.tdm.idf.tidy <- tdm.idf.tidy %>%
#   cast_sparse(document, term, count)
# list of presidents who did two terms in office
prex.out <- substr(speeches, 6, nchar(speeches)-4)
speeches.info <- as.data.frame(prex.out)
speeches.info <- cSplit(speeches.info, "prex.out", "-")
colnames(speeches.info)[1] <- "name"
colnames(speeches.info)[2] <- "term"
speeches.info$prex.out_3 <- NULL
president.list <- as.character(speeches.info[speeches.info$term==2,]$name)
print(president.list)
# update all dtms tables so that they contain only speeches given by presidents who stayed two terms in office
# see the file processing.R for details about the functions used in this chunk
dtm.tidy <- update.tables(dtm.tidy,president.list)
dtm.idf.tidy <- update.tables(dtm.idf.tidy,president.list)
dtm.all <- summarise(group_by(dtm.tidy, word), count = sum(count))
dtm.idf.all <- summarise(group_by(dtm.idf.tidy, word), count = sum(count))
ui <- fluidPage(selectInput(inputId = "data","", president.list),
plotOutput(outputId = "wordclouds")
)
server <- function(input, output) {
data <- reactive({
dtm.idf.tidy[dtm.idf.tidy$document==term1,]
})
output$wordclouds <- renderPlot({
wordcloud(data()$word, data()$count,
main = "1st Term",
scale=c(5,0.5),
max.words=70,
min.freq=1,
random.order=FALSE,
rot.per=0.0,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
})
}
shinyApp(ui = ui, server = server)
library(ISLR)
names(Smarket)   # Contains % returns for S&P 500 for 1250 days from 2001 to 2005
dim(Smarket)     # It also contains returns for 5 previous days and previous day's trading volume
summary(Smarket)
pairs(Smarket)
pairs(Smarket)
cor(Smarket[,-9])
attach(Smarket)
names(Smarket)
plot(Volume)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
summary(glm.fit)$coef[,4]
glm.probs=predict(glm.fit,type="response")
dim(Smarket)
glm.probs[1:10]
contrasts(Direction)
glm.pred=rep("Down",1250)  # A 1250 x 1 vector with "Down" in every position
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction)
(507+145)/1250
mean(glm.pred==Direction)
train=(Year<2005)   # Creating separate training and test sets
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
Direction.2005
predict(glm.fit,newdata=data.frame(Lag1=c(1.2,1.5),Lag2=c(1.1,-0.8)),type="response")
train=(Year<2005)   # Creating separate training and test sets
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
# Notice use of subset=train argument on next line
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005) # confusion matrix for test set
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)  # test error rate is 52% Not good at all ...
# Recall p-values are all pretty large so perhaps a good idea to throw most of them out
glm.fit=glm(Direction~Lag1+Lag2,data=Smarket,family=binomial,subset=train)  # Just using lag1 and lag2
glm.probs=predict(glm.fit,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)   # results are "better": 56% of moves correctly predicted
# But it turns out market went up 56% of the time in 2005 so results not very good really
106/(106+76)  # =58.2% = % of correct predictions when prediction was "Up"
# Can get specific predicted probabilities by passing values of explanatory variables to the fitted model
predict(glm.fit,newdata=data.frame(Lag1=c(1.2,1.5),Lag2=c(1.1,-0.8)),type="response")
library(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train)  # fit LDA on same data
lda.fit
plot(lda.fit)
plot(lda.fit)
lda.pred=predict(lda.fit, Smarket.2005)
names(lda.pred)
lda.class=lda.pred$class
table(lda.class,Direction.2005)
sum(lda.pred$posterior[,1]>=.5)  # posterior is an n x K=2  matrix of poserior probs (n = # of data points)
sum(lda.pred$posterior[,1]<.5)
lda.pred$posterior[1:20,1]
lda.class[1:20]
sum(lda.pred$posterior[,1]>.9)
library(class)
train.X=cbind(Lag1,Lag2)[train,]
View(train.X)
shiny::runApp('Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app')
deployApp()
library(rsconnect)
deployApp()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3")
deployApp()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
install.packages("shiny")
install.packages("shinydashboard")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("purrr")
install.packages("tidyr")
install.packages("plotly")
install.packages("reshae2")
install.packages("reshape2")
install.packages("RColorBrewer")
install.packages("rgdal")
install.packages("broom")
install.packages("htmltools")
install.packages("leaflet")
shiny::runApp()
rsconnect::showLogs()
deployApp()
library(rsconnect)
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
rsconnect::showLogs()
deployApp()
rsconnect::showLogs()
deployApp()
deployApp()
rsconnect::showLogs()
deployApp()
runApp()
deployApp()
rsconnect::showLogs()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
rsconnect::showLogs()
deployApp()
deployApp()
deployApp()
runApp()
runApp()
runApp()
install.packages("ggrepel")
runApp()
runApp()
runApp()
runApp()
runApp()
advertising <- read.csv("./output/advertising.csv", stringsAsFactors = FALSE, sep=",")
advertising <- advertising[!advertising$media=="Total",]
advertising[is.na(advertising)] <- 0
advertising <- advertising %>%
group_by(year, media) %>%
summarize(spendings = sum(spendings))
advertising_total <-
advertising %>%
group_by(year) %>%
summarize(spendings=sum(spendings)) %>%
subset(year>1975)
consumption_us <- read.csv("./data/consumption_tobacco_us.csv", sep=";")
consumption_us <-
consumption_us %>%
subset(year>1975)
advertising_consumption <- cbind(advertising_total, consumption_us)
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
advertising <- read.csv("./output/advertising.csv", stringsAsFactors = FALSE, sep=",")
advertising <- advertising[!advertising$media=="Total",]
advertising[is.na(advertising)] <- 0
advertising <- advertising %>%
group_by(year, media) %>%
summarize(spendings = sum(spendings))
advertising_total <-
advertising %>%
group_by(year) %>%
summarize(spendings=sum(spendings)) %>%
subset(year>1975)
consumption_us <- read.csv("./data/consumption_tobacco_us.csv", sep=";")
consumption_us <-
consumption_us %>%
subset(year>1975)
advertising_consumption <- cbind(advertising_total, consumption_us)
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
advertising <- read.csv("advertising.csv", stringsAsFactors = FALSE, sep=",")
advertising <- advertising[!advertising$media=="Total",]
advertising[is.na(advertising)] <- 0
advertising <- advertising %>%
group_by(year, media) %>%
summarize(spendings = sum(spendings))
advertising_total <-
advertising %>%
group_by(year) %>%
summarize(spendings=sum(spendings)) %>%
subset(year>1975)
consumption_us <- read.csv("consumption_tobacco_us.csv", sep=";")
consumption_us <-
consumption_us %>%
subset(year>1975)
advertising_consumption <- cbind(advertising_total, consumption_us)
g <- ggplot(advertising_consumption, aes(percentage, spendings/1000)) +
geom_point() +
geom_text_repel(aes(label=year)) +
# scale_colour_gradientn(name="Year", colours=rainbow(4)) +
xlab("Smorker Proportion(%)") +
ylab("Spendings on Tobacco Commercials (thousands $)")
g
ggplotly(g)
runApp()
View(advertising_consumption)
p <- plot_ly(advertising_consumption, x = ~spendings, y = ~percentage, type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_annotations(x = advertising_consumption$spendings,
y = advertising_consumption$percentage,
text = advertising_consumption$year,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p
advertising_consumption[,4] <- NULL
p <- plot_ly(advertising_consumption, x = ~spendings, y = ~percentage, type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_annotations(x = advertising_consumption$spendings,
y = advertising_consumption$percentage,
text = advertising_consumption$year,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p
View(advertising_consumption)
consumption_us <-
consumption_us %>%
subset(year>1975)
advertising_consumption <- cbind(advertising_total, consumption_us)
advertising_consumption[,1] <- NULL
p <- plot_ly(advertising_consumption, x = ~spendings, y = ~percentage, type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_annotations(x = advertising_consumption$spendings,
y = advertising_consumption$percentage,
text = advertising_consumption$year,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p
p <- plot_ly(advertising_consumption, x = ~percentage, y = ~spendings, type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_annotations(x = advertising_consumption$percentage,
y = advertising_consumption$spendings,
text = advertising_consumption$year,
xref = "x",
yref = "y",
showarrow = FALSE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p
p <- plot_ly(advertising_consumption, x = ~percentage, y = ~spendings, type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_annotations(x = advertising_consumption$percentage,
y = advertising_consumption$spendings,
text = advertising_consumption$year,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p
advertising_consumption <- advertising_consumption[!is.na(advertising_consumption)]
consumption_us <-
consumption_us %>%
subset(year>1975)
advertising_consumption <- cbind(advertising_total, consumption_us)
advertising_consumption[,1] <- NULL
advertising_consumption <- advertising_consumption[!is.na(advertising_consumption$percentage)]
!is.na(advertising_consumption$percentage)
advertising_consumption[,!is.na(advertising_consumption$percentage)]
advertising_consumption[!is.na(advertising_consumption$percentage),]
advertising_consumption <- advertising_consumption[!is.na(advertising_consumption$percentage),]
p <- plot_ly(advertising_consumption, x = ~percentage, y = ~spendings, type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_annotations(x = advertising_consumption$percentage,
y = advertising_consumption$spendings,
text = advertising_consumption$year,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 20,
ay = -40)
p
p <- plot_ly(advertising_consumption, x = ~percentage, y = ~spendings,
text=advertising_consumption$year
type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_text(textfont = t, textposition = "top right")
p <- plot_ly(advertising_consumption, x = ~percentage, y = ~spendings,
text=advertising_consumption$year,
type = 'scatter', mode = 'markers',
marker = list(size = 10)) %>%
add_text(textfont = t, textposition = "top right")
p
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=advertising_consumption$year) %>%
add_markers() %>%
add_text(textfont = t, textposition = "top right")
p
list(advertising_consumption$year)
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=list(advertising_consumption$year)) %>%
add_markers() %>%
add_text(textfont = t, textposition = "top right")
p
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=~year) %>%
add_markers() %>%
add_text(textfont = t, textposition = "top right")
p
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=~year) %>%
add_markers() %>%
add_text( textposition = "top right")
p
t <- list(
family = "sans serif",
size = 14,
color = toRGB("grey50"))
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=~year) %>%
add_markers() %>%
add_text(textfont=t, textposition = "top right")
p
t <- list(
family = "sans serif",
size = 14,
color = toRGB("grey50"))
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=~year) %>%
add_markers() %>%
add_text(textfont=t, textposition = "top right") %>%
layout(title="Spendings vs Proportion of smokers betwwen 1975 and 2014",
xaxis=list(title="Smorker Proportion(%)")
yaxis=list(title="Spendings on Tobacco Commercials ($)"))
p
t <- list(
family = "sans serif",
size = 14,
color = toRGB("grey50"))
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=~year) %>%
add_markers() %>%
add_text(textfont=t, textposition = "top right") %>%
layout(title="Spendings vs Proportion of smokers betwwen 1975 and 2014",
xaxis=list(title="Smorker Proportion(%)"),
yaxis=list(title="Spendings on Tobacco Commercials ($)"))
p
t <- list(
family = "sans serif",
size = 14,
color = toRGB("grey50"))
p <- plot_ly(advertising_consumption, x=~percentage, y=~spendings,
text=~year) %>%
add_markers() %>%
add_text(textfont=t, textposition = "top right") %>%
layout(title="Spendings vs Proportion of smokers betwwen 1975 and 2014",
xaxis=list(title="Smorker Proportion(%)"),
yaxis=list(title="Spendings on Tobacco Commercials ($)"),
showlegend=FALSE)
p
runApp()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
runApp()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
deployApp()
deployApp()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
runApp()
rsconnect::showLogs()
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/Columbia/Applied Data Science/Spr2017-proj2-grp3/app")
deployApp()
